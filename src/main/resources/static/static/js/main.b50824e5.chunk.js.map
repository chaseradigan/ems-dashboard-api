{"version":3,"sources":["Layout/QueueList.js","Layout/ServerLinks.js","Layout/ServerList.js","App.js","serviceWorker.js","index.js"],"names":["QueueList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filePath","currentList","oldList","value","oldvalue","consumers","errorsCur","errorsOld","handleChange","bind","assertThisInitialized","handleOldChange","handleSubmit","upload","event","setState","target","preventDefault","path","axios","get","headers","res","_this2","pathnameID","match","params","id","pathnameQueue","queue","concat","then","response","data","errors","catch","error","console","log","pathname2","_this3","react_default","a","createElement","className","onSubmit","onChange","map","entry","key","server","type","oldentry","length","Component","ServerLinks","react_router_dom","to","onClick","handleClick1","handleClick2","ListServers","_ref","servers","ServerList","ServerList_ListServers","App","react_router","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b50824e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// function compare(array1, array2) {\r\n//   if (!array1 || !array2) return;\r\n//   const temp = [];\r\n//   array1 = array1\r\n//     .toString()\r\n//     .split(\",\")\r\n//     .map(String);\r\n//   array2 = array2\r\n//     .toString()\r\n//     .split(\",\")\r\n//     .map(String);\r\n\r\n//   for (var i in array1) {\r\n//     if (!array2.includes(array1[i])) temp.push(array1[i]);\r\n//   }\r\n//   for (i in array2) {\r\n//     if (!array1.includes(array2[i])) temp.push(array2[i]);\r\n//   }\r\n//   return temp.sort((a, b) => a - b);\r\n// }\r\n\r\nexport default class QueueList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filePath: props.filePath,\r\n      currentList: [],\r\n      oldList: [],\r\n      value: \"\",\r\n      oldvalue: \"\",\r\n      consumers: false,\r\n      errorsCur: null,\r\n      errorsOld: null\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleOldChange = this.handleOldChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.upload = this.upload.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n  handleOldChange(event) {\r\n    this.setState({ oldvalue: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      consumers: true\r\n    });\r\n\r\n    event.preventDefault();\r\n  }\r\n  async upload(path) {\r\n    const res = await axios.get(\"/test\", {\r\n      headers: {\r\n        path: path\r\n      }\r\n    });\r\n    return res;\r\n  }\r\n  componentDidMount() {\r\n    let pathnameID = this.props.match.params.id;\r\n    let pathnameQueue = this.props.match.params.queue;\r\n    let path = `${pathnameID}` + \"/\" + `${pathnameQueue}` + \"/logs/final.txt\";\r\n    this.upload(path)\r\n      .then(response => {\r\n        this.setState({\r\n          currentList: response.data,\r\n          errorsCur: response.data.errors\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorsCur: error.response.data });\r\n        console.log(error.response);\r\n      });\r\n\r\n    let pathname2 =\r\n      `${pathnameID}` + \"/\" + `${pathnameQueue}` + \"/logs/past.txt\";\r\n    this.upload(pathname2)\r\n      .then(response => {\r\n        this.setState({\r\n          oldList: response.data,\r\n          errorsOld: response.data.errors\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorsOld: error.response.data });\r\n        console.log(error.response);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // let comparison;\r\n    // if (\r\n    //   this.state.value === this.state.oldvalue &&\r\n    //   this.state.value.length > 0\r\n    // ) {\r\n    //   let arrOld;\r\n    //   let arrCur;\r\n    //   for (const list of this.state.currentList) {\r\n    //     if (list.server === this.state.value) {\r\n    //       arrCur = list.consumers;\r\n    //     }\r\n    //   }\r\n    //   for (const list of this.state.oldList) {\r\n    //     if (list.server === this.state.oldvalue) {\r\n    //       arrOld = list.consumers;\r\n    //     }\r\n    //   }\r\n    //   comparison = compare(arrOld, arrCur);\r\n    // }\r\n    if (this.state.errorsCur || this.state.errorsOld) {\r\n      return (\r\n        <div className=\"alert alert-danger\">\r\n          <div className=\"row\">{this.state.errorsCur}</div>\r\n          <div className=\"row\">{this.state.errorsOld}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\" container  text-dark\">\r\n          <div className=\"row align-top\">\r\n            <div className=\"col-6 mb-5 mt-5\">\r\n              <form\r\n                className=\"form-control-sm  mb-5 \"\r\n                onSubmit={this.handleSubmit}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <div className=\"form-label\">Old Queues</div>\r\n                  <select\r\n                    value={this.state.oldvalue}\r\n                    onChange={this.handleOldChange}\r\n                  >\r\n                    <option>Choose a Queue...</option>\r\n                    {this.state.oldList.map(entry => (\r\n                      <option key={entry.server} value={entry.server}>\r\n                        {entry.server}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  className=\"btn btn-primary\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                />\r\n              </form>\r\n            </div>\r\n            <div className=\"col-6 mb-5 mt-5\">\r\n              <form\r\n                className=\"form-control-sm  mb-5\"\r\n                onSubmit={this.handleSubmit}\r\n              >\r\n                <div className=\" form-group \">\r\n                  <div className=\"form-label\">Current Queues</div>\r\n                  <select value={this.value} onChange={this.handleChange}>\r\n                    <option>Choose a Queue...</option>\r\n                    {this.state.currentList.map(entry => (\r\n                      <option key={entry.server} value={entry.server}>\r\n                        {entry.server}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  className=\"btn btn-primary\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row  \">\r\n            <div className=\"col-6 mb-5\">\r\n              {this.state.consumers ? (\r\n                <div>\r\n                  {this.state.oldList.map(oldentry => (\r\n                    <div>\r\n                      {oldentry.server === this.state.oldvalue ? (\r\n                        <div>\r\n                          <ul className=\"list-group\">\r\n                            <li className=\"list-group-item active\">\r\n                              Old Consumers: {oldentry.consumers.length}\r\n                            </li>\r\n                            {oldentry.consumers.map(oldentry => (\r\n                              <li className=\"list-group-item small display-4 font-weight-light \">\r\n                                {oldentry}\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n            <div className=\"col-6 mb-5\">\r\n              {this.state.consumers ? (\r\n                <div>\r\n                  {this.state.currentList.map(entry => (\r\n                    <div>\r\n                      {entry.server === this.state.value ? (\r\n                        <div>\r\n                          <ul className=\"list-group\">\r\n                            <li className=\"list-group-item active\">\r\n                              Current Consumers: {entry.consumers.length}\r\n                            </li>\r\n                            {entry.consumers.map(entry => (\r\n                              <li className=\"list-group-item small display-4 font-weight-light\">\r\n                                {entry}\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class ServerLinks extends Component {\r\n  handleClick2() {}\r\n  render() {\r\n    let ems2 = \"EMS_U2\";\r\n    let ems1 = \"EMS_U1\";\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to={`/${ems1}`}>\r\n          <button className=\"btn btn-light\" onClick={this.handleClick1}>\r\n            EMS_U1\r\n          </button>\r\n        </Link>\r\n        <Link to={`/${ems2}`}>\r\n          <button className=\"btn btn-light\" onClick={this.handleClick2}>\r\n            EMS_U2\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ListServers = ({ servers, id }) => (\r\n  <div>\r\n    {servers.map(server => (\r\n      <div className=\"row\" key={server}>\r\n        <Link to={`/${id}/${server}`}>\r\n          <button className=\"btn btn-light\">{server}</button>\r\n        </Link>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\nexport default class ServerList extends Component {\r\n  render() {\r\n    let U1servers = [\r\n      \"APP_U1_p1d0_7022\",\r\n      \"APP_U1_p1d1_7122\",\r\n      \"APP_U1_p2d0_7022\",\r\n      \"APP_U1_p2d1_7122\",\r\n      \"APP_U1_p5d0_7022\",\r\n      \"APP_U1_p5d1_7122\",\r\n      \"APP_U1_p6d0_7022\",\r\n      \"APP_U1_p6d1_7122\"\r\n    ];\r\n    let U2servers = [\r\n      \"APP_U2_p1d0_7022\",\r\n      \"APP_U2_p1d1_7122\",\r\n      \"APP_U2_p2d0_7022\",\r\n      \"APP_U2_p2d1_7122\",\r\n      \"APP_U2_p5d0_7022\",\r\n      \"APP_U2_p5d1_7122\",\r\n      \"APP_U2_p6d0_7022\",\r\n      \"APP_U2_p6d1_7122\"\r\n    ];\r\n\r\n    const {\r\n      match: { params }\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"container text-dark \">\r\n        {params.id === \"EMS_U1\" ? (\r\n          <ListServers servers={U1servers} id={params.id} />\r\n        ) : (\r\n          <ListServers servers={U2servers} id={params.id} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport QueueList from \"./Layout/QueueList\";\nimport ServerLinks from \"./Layout/ServerLinks\";\nimport ServerList from \"./Layout/ServerList\";\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <header className=\"App-header bg-light\">\n            <div className=\"container\" />\n\n            <Route exact path=\"/\" component={ServerLinks} />\n            <Route exact path=\"/:id\" component={ServerList} />\n            <Route exact path=\"/:id/:queue\" component={QueueList} />\n          </header>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}