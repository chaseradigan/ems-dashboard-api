{"version":3,"sources":["Layout/QueueList.js","Layout/ServerLinks.js","Layout/ServerList.js","App.js","serviceWorker.js","index.js"],"names":["QueueList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filePath","currentList","oldList","compareList","value","oldvalue","consumers","errorsCur","errorsOld","handleChange","bind","assertThisInitialized","handleOldChange","handleSubmit","upload","event","setState","target","preventDefault","path","axios","get","headers","res","queue","pathnameID","match","params","id","pathnameQueue","data","changes","_this2","concat","then","response","errors","catch","error","console","log","pathname2","_this3","react_default","a","createElement","className","length","compare","onSubmit","onChange","map","entry","key","server","type","change","substring","oldentry","Component","ServerLinks","react_router_dom","to","onClick","handleClick1","handleClick2","ListServers","_ref","servers","ServerList","ServerList_ListServers","App","react_router","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e016f6bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// function compare(array1, array2) {\r\n//   if (!array1 || !array2) return;\r\n//   const temp = [];\r\n//   array1 = array1\r\n//     .toString()\r\n//     .split(\",\")\r\n//     .map(String);\r\n//   array2 = array2\r\n//     .toString()\r\n//     .split(\",\")\r\n//     .map(String);\r\n\r\n//   for (var i in array1) {\r\n//     if (!array2.includes(array1[i])) temp.push(array1[i]);\r\n//   }\r\n//   for (i in array2) {\r\n//     if (!array1.includes(array2[i])) temp.push(array2[i]);\r\n//   }\r\n//   return temp.sort((a, b) => a - b);\r\n// }\r\n\r\nexport default class QueueList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filePath: props.filePath,\r\n      currentList: [],\r\n      oldList: [],\r\n      compareList: [],\r\n      value: \"\",\r\n      oldvalue: \"\",\r\n      consumers: false,\r\n      errorsCur: null,\r\n      errorsOld: null\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleOldChange = this.handleOldChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.upload = this.upload.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n  handleOldChange(event) {\r\n    this.setState({ oldvalue: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.setState({\r\n      consumers: true\r\n    });\r\n\r\n    event.preventDefault();\r\n  }\r\n  async upload(path) {\r\n    const res = await axios.get(\"/test\", {\r\n      headers: {\r\n        path: path\r\n      }\r\n    });\r\n    return res;\r\n  }\r\n  async compare(queue) {\r\n    let pathnameID = this.props.match.params.id;\r\n    let pathnameQueue = this.props.match.params.queue;\r\n    let path = `${pathnameID}/${pathnameQueue}/logs/`;\r\n    const res = await axios.get(\"/compare\", {\r\n      headers: {\r\n        path: path,\r\n        queue: queue\r\n      }\r\n    });\r\n    this.setState({\r\n      compareList: res.data.changes\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    let pathnameID = this.props.match.params.id;\r\n    let pathnameQueue = this.props.match.params.queue;\r\n    let path = `${pathnameID}/${pathnameQueue}/logs/final.txt`;\r\n    this.upload(path)\r\n      .then(response => {\r\n        this.setState({\r\n          currentList: response.data,\r\n          errorsCur: response.data.errors\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorsCur: error.response.data });\r\n        console.log(error.response);\r\n      });\r\n\r\n    let pathname2 = `${pathnameID}/${pathnameQueue}/logs/past.txt`;\r\n    this.upload(pathname2)\r\n      .then(response => {\r\n        this.setState({\r\n          oldList: response.data,\r\n          errorsOld: response.data.errors\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorsOld: error.response.data });\r\n        console.log(error.response);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // let comparison;\r\n    // if (\r\n    //   this.state.value === this.state.oldvalue &&\r\n    //   this.state.value.length > 0\r\n    // ) {\r\n    //   let arrOld;\r\n    //   let arrCur;\r\n    //   for (const list of this.state.currentList) {\r\n    //     if (list.server === this.state.value) {\r\n    //       arrCur = list.consumers;\r\n    //     }\r\n    //   }\r\n    //   for (const list of this.state.oldList) {\r\n    //     if (list.server === this.state.oldvalue) {\r\n    //       arrOld = list.consumers;\r\n    //     }\r\n    //   }\r\n    //   comparison = compare(arrOld, arrCur);\r\n    // }\r\n\r\n    if (this.state.errorsCur || this.state.errorsOld) {\r\n      return (\r\n        <div className=\"alert alert-danger\">\r\n          <div className=\"row\">{this.state.errorsCur}</div>\r\n          <div className=\"row\">{this.state.errorsOld}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      if (\r\n        this.state.value === this.state.oldvalue &&\r\n        this.state.compareList.length === 0 &&\r\n        !!this.state.value\r\n      ) {\r\n        this.compare(this.state.value);\r\n      } else if (\r\n        this.state.value !== this.state.oldvalue &&\r\n        this.state.compareList.length !== 0\r\n      ) {\r\n        this.setState({\r\n          compareList: []\r\n        });\r\n      }\r\n      return (\r\n        <div className=\" container  text-dark\">\r\n          <div className=\"row align-top\">\r\n            <div className=\"col-6 mb-5 mt-5\">\r\n              <form\r\n                className=\"form-control-sm  mb-5 \"\r\n                onSubmit={this.handleSubmit}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <div className=\"form-label\">Old Queues</div>\r\n                  <select\r\n                    value={this.state.oldvalue}\r\n                    onChange={this.handleOldChange}\r\n                  >\r\n                    <option>Choose a Queue...</option>\r\n                    {this.state.oldList.map(entry => (\r\n                      <option key={entry.server} value={entry.server}>\r\n                        {entry.server}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  className=\"btn btn-primary\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                />\r\n              </form>\r\n            </div>\r\n            <div className=\"col-6 mb-5 mt-5\">\r\n              <form\r\n                className=\"form-control-sm  mb-5\"\r\n                onSubmit={this.handleSubmit}\r\n              >\r\n                <div className=\" form-group \">\r\n                  <div className=\"form-label\">Current Queues</div>\r\n                  <select value={this.value} onChange={this.handleChange}>\r\n                    <option>Choose a Queue...</option>\r\n                    {this.state.currentList.map(entry => (\r\n                      <option key={entry.server} value={entry.server}>\r\n                        {entry.server}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <input\r\n                  className=\"btn btn-primary\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.compareList.length > 0 && this.state.consumers && (\r\n            <div>\r\n              <ul className=\"list-group\">\r\n                <li className=\"list-group-item active\">\r\n                  Changes in {this.state.value}: {this.state.compareList.length}\r\n                </li>\r\n                {this.state.compareList.map(change => {\r\n                  let sign = change.substring(0, 1);\r\n                  if (sign === \"+\") {\r\n                    return (\r\n                      <li className=\"list-group-item small list-group-item-success display-4 font-weight-light \">\r\n                        {change}\r\n                      </li>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <li className=\"list-group-item list-group-item-danger small display-4 font-weight-light \">\r\n                        {change}\r\n                      </li>\r\n                    );\r\n                  }\r\n                })}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"row  \">\r\n            <div className=\"col-6 mb-5\">\r\n              {this.state.consumers && (\r\n                <div>\r\n                  {this.state.oldList.map(oldentry => (\r\n                    <div>\r\n                      {oldentry.server === this.state.oldvalue && (\r\n                        <div>\r\n                          <ul className=\"list-group\">\r\n                            <li className=\"list-group-item active\">\r\n                              Old Consumers: {oldentry.consumers.length}\r\n                            </li>\r\n                            {oldentry.consumers.map(oldentry => (\r\n                              <li className=\"list-group-item small display-4 font-weight-light \">\r\n                                {oldentry}\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"col-6 mb-5\">\r\n              {this.state.consumers && (\r\n                <div>\r\n                  {this.state.currentList.map(entry => (\r\n                    <div>\r\n                      {entry.server === this.state.value && (\r\n                        <div>\r\n                          <ul className=\"list-group\">\r\n                            <li className=\"list-group-item active\">\r\n                              Current Consumers: {entry.consumers.length}\r\n                            </li>\r\n                            {entry.consumers.map(entry => (\r\n                              <li className=\"list-group-item small display-4 font-weight-light\">\r\n                                {entry}\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class ServerLinks extends Component {\r\n  handleClick2() {}\r\n  render() {\r\n    let ems2 = \"EMS_U2\";\r\n    let ems1 = \"EMS_U1\";\r\n    return (\r\n      <div className=\"container\">\r\n        <Link to={`/${ems1}`}>\r\n          <button className=\"btn btn-light\" onClick={this.handleClick1}>\r\n            EMS_U1\r\n          </button>\r\n        </Link>\r\n        <Link to={`/${ems2}`}>\r\n          <button className=\"btn btn-light\" onClick={this.handleClick2}>\r\n            EMS_U2\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ListServers = ({ servers, id }) => (\r\n  <div>\r\n    {servers.map(server => (\r\n      <div className=\"row\" key={server}>\r\n        <Link to={`/${id}/${server}`}>\r\n          <button className=\"btn btn-light\">{server}</button>\r\n        </Link>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\nexport default class ServerList extends Component {\r\n  render() {\r\n    let U1servers = [\r\n      \"APP_U1_p1d0_7022\",\r\n      \"APP_U1_p1d1_7122\",\r\n      \"APP_U1_p2d0_7022\",\r\n      \"APP_U1_p2d1_7122\",\r\n      \"APP_U1_p5d0_7022\",\r\n      \"APP_U1_p5d1_7122\",\r\n      \"APP_U1_p6d0_7022\",\r\n      \"APP_U1_p6d1_7122\"\r\n    ];\r\n    let U2servers = [\r\n      \"APP_U2_p1d0_7022\",\r\n      \"APP_U2_p1d1_7122\",\r\n      \"APP_U2_p2d0_7022\",\r\n      \"APP_U2_p2d1_7122\",\r\n      \"APP_U2_p5d0_7022\",\r\n      \"APP_U2_p5d1_7122\",\r\n      \"APP_U2_p6d0_7022\",\r\n      \"APP_U2_p6d1_7122\"\r\n    ];\r\n\r\n    const {\r\n      match: { params }\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"container text-dark \">\r\n        {params.id === \"EMS_U1\" ? (\r\n          <ListServers servers={U1servers} id={params.id} />\r\n        ) : (\r\n          <ListServers servers={U2servers} id={params.id} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport QueueList from \"./Layout/QueueList\";\r\nimport ServerLinks from \"./Layout/ServerLinks\";\r\nimport ServerList from \"./Layout/ServerList\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <div className=\"App\">\r\n          <header className=\"App-header bg-light\">\r\n            <div className=\"container\" />\r\n\r\n            <Route exact path=\"/\" component={ServerLinks} />\r\n            <Route exact path=\"/:id\" component={ServerList} />\r\n            <Route exact path=\"/:id/:queue\" component={QueueList} />\r\n          </header>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}